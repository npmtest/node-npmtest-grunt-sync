{"/home/travis/build/npmtest/node-npmtest-grunt-sync/test.js":"/* istanbul instrument in package npmtest_grunt_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-sync/lib.npmtest_grunt_sync.js":"/* istanbul instrument in package npmtest_grunt_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_sync = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_sync = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-sync/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-sync && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_sync */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_sync\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_sync.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_sync.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_sync.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_sync.__dirname + '/lib.npmtest_grunt_sync.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-sync/node_modules/grunt-sync/Gruntfile.js":"/*global module:false*/\nmodule.exports = function (grunt) {\n  require('time-grunt')(grunt);\n\n  // Project configuration.\n  grunt.initConfig({\n    files: ['Gruntfile.js', 'tasks/**/*.js', 'test/*.js'],\n\n    watch: {\n      all: {\n        files: '<%= files %>'\n      }\n    },\n\n    simplemocha: {\n      all: {\n        src: 'test/*.js'\n      }\n    },\n\n    jshint: {\n      all: '<%= files %>'\n    },\n\n    sync: grunt.file.readJSON('sync.json'),\n\n    complexity: grunt.file.readJSON('complexity.json')\n  });\n  grunt.loadNpmTasks('grunt-simple-mocha');\n  grunt.loadNpmTasks('grunt-complexity');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n\n  grunt.registerTask('default', ['jshint', 'simplemocha', 'complexity']);\n\n  // Used for testing only, you shouldn't add this to your code:\n  grunt.loadTasks('tasks');\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-sync/node_modules/grunt-sync/tasks/sync.js":"var fs = require('promised-io/fs');\nvar promise = require('promised-io/promise');\nvar path = require('path');\nvar glob = require('glob');\nvar util = require('util');\nvar _ = require('lodash');\n\nmodule.exports = function (grunt) {\n\n  grunt.registerMultiTask('sync', 'Synchronize content of two directories.', function () {\n    var done = this.async();\n    var logger = grunt[this.data.verbose ? 'log' : 'verbose'];\n    var updateOnly = !this.data.updateAndDelete;\n    var justPretend = !!this.data.pretend;\n    var failOnError = !!this.data.failOnError;\n    var ignoredPatterns = this.data.ignoreInDest;\n    var comparatorFactory = getComparatorFactory(this.data.compareUsing || 'mtime', logger);\n    var expandedPaths = {};\n\n    var getExpandedPaths = function (origDest) {\n      if (!expandedPaths[origDest]) {\n        // Always include destination as processed.\n        expandedPaths[origDest] = [origDest.replace(new RegExp('\\\\' + path.sep + '$'), '')];\n        return expandedPaths[origDest];\n      }\n      return expandedPaths[origDest];\n    };\n\n    promise.all(this.files.map(function (fileDef) {\n      var isCompactForm = this.data.src && this.data.dest;\n      var cwd = fileDef.cwd ? fileDef.cwd : '.';\n      var isExpanded = fileDef.orig.expand;\n      var origDest = path.join(fileDef.orig.dest, '');\n\n      var processedDestinations = getExpandedPaths(origDest);\n\n      return promise.all(fileDef.src.map(function (src) {\n        var dest;\n        // when using expanded mapping dest is the destination file\n        // not the destination folder\n        if (isExpanded || isCompactForm) {\n          dest = convertPathsToSystemSpecific(fileDef.dest);\n        } else {\n          dest = path.join(fileDef.dest, src);\n        }\n        if (!updateOnly) {\n          processedDestinations.push(dest);\n          // Make sure to add directory of file as well (handle cases when source has pattern for files only)\n          addDirectoriesPaths(processedDestinations, dest);\n        }\n        // Process pair\n        return processPair(justPretend, failOnError, logger, comparatorFactory, path.join(cwd, src), dest);\n      }));\n\n    }, this)).then(function () {\n      if (updateOnly) {\n        return;\n      }\n\n      var getDestPaths = function (dest, pattern) {\n        var defer = new promise.Deferred();\n        glob(pattern, {\n          cwd: dest,\n          dot: true\n        }, function (err, result) {\n          if (err) {\n            defer.reject(err);\n            return;\n          }\n          defer.resolve(result.map(function (filePath) {\n            return path.join(dest, filePath);\n          }));\n        });\n        return defer.promise;\n      };\n\n      var getIgnoredPaths = function (dest, ignore) {\n        var defer = new promise.Deferred();\n        if (!ignore) {\n          defer.resolve([]);\n          return defer.promise;\n        }\n\n        if (!util.isArray(ignore)) {\n          ignore = [ignore];\n        }\n\n        promise.all(ignore.map(function (pattern) {\n          return getDestPaths(dest, pattern);\n        })).then(function (results) {\n          var flat = results.reduce(function (memo, a) {\n            return memo.concat(a);\n          }, []);\n          defer.resolve(flat);\n        }, function (err) {\n          defer.reject(err);\n        });\n\n        return defer.promise;\n      };\n\n      // Second pass\n      return promise.all(Object.keys(expandedPaths).map(function (dest) {\n        var processedDestinations = convertPathsToSystemSpecific(expandedPaths[dest]);\n\n        // We have to do second pass to remove objects from dest\n        var destPaths = getDestPaths(dest, '**');\n\n        // Check if we have any ignore patterns\n        var ignoredPaths = getIgnoredPaths(dest, ignoredPatterns);\n\n        return promise.all([destPaths, ignoredPaths, processedDestinations]);\n      })).then(function (result) {\n        var files = result.map(function (destAndIgnored) {\n          var paths = convertPathsToSystemSpecific(destAndIgnored[0]);\n          var ignoredPaths = convertPathsToSystemSpecific(destAndIgnored[1]);\n\n          return [paths, ignoredPaths, destAndIgnored[2]];\n        }).reduce(function (memo, destAndIgnored) {\n          return memo.map(function (val, key) {\n            return val.concat(destAndIgnored[key]);\n          });\n        }, [[], [], []]);\n\n        // TODO Find some faster way to ensure uniqueness here\n        var paths = _.uniq(files[0]);\n        var ignoredPaths = _.uniq(files[1]);\n        var processedDestinations = _.uniq(files[2]);\n\n        // Calculate diff\n        var toRemove = fastArrayDiff(paths, processedDestinations);\n        // And filter also ignored paths\n        toRemove = fastArrayDiff(toRemove, ignoredPaths);\n\n        return removePaths(justPretend, logger, toRemove);\n      });\n    }).then(done);\n  });\n\n  function processPair (justPretend, failOnError, logger, comparatorFactory, src, dest) {\n\n    // stat destination file\n    return promise.all([fs.stat(src), fs.stat(dest)]).then(function (result) {\n      var srcStat = result[0];\n      var destStat = result[1];\n\n      var isSrcDirectory = srcStat.isDirectory();\n      var typeDiffers = isSrcDirectory !== destStat.isDirectory();\n      var haventChangedFn = comparatorFactory(src, srcStat, dest, destStat);\n\n      overwriteOrUpdate(isSrcDirectory, typeDiffers, haventChangedFn);\n    }, function () {\n      // we got an error which means that destination file does not exist\n      // so make a copy\n      if (grunt.file.isDir(src)) {\n        logger.writeln('Creating ' + dest.cyan);\n\n        doOrPretend(function () {\n          tryMkdir(dest);\n        });\n      } else {\n        logger.writeln('Copying ' + src.cyan + ' -> ' + dest.cyan);\n\n        doOrPretend(function () {\n          tryCopy(src, dest);\n        });\n      }\n    });\n\n    function doOrPretend (operation) {\n      if (justPretend) {\n        return;\n      }\n      operation();\n    }\n\n    function warnOrFail (msg) {\n      if (failOnError) {\n        grunt.fail.warn(msg);\n        return;\n      }\n      grunt.log.warn(msg);\n    }\n\n    function tryCopy (src, dest) {\n      try {\n        grunt.file.copy(src, dest);\n      } catch (e) {\n        warnOrFail('Cannot copy to ' + dest.red);\n      }\n    }\n\n    function tryMkdir (dest) {\n      try {\n        grunt.file.mkdir(dest);\n      } catch (e) {\n        warnOrFail('Cannot create directory ' + dest.red);\n      }\n    }\n\n    function overwriteDest (src, dest) {\n      try {\n        grunt.file['delete'](dest);\n        grunt.file.copy(src, dest);\n      } catch (e) {\n        warnOrFail('Cannot overwrite ' + dest.red);\n      }\n    }\n\n    function overwriteOrUpdate (isSrcDirectory, typeDiffers, haventChangedFn) {\n\n      // If types differ we have to overwrite destination.\n      if (typeDiffers) {\n        logger.writeln('Overwriting ' + dest.cyan + ' because type differs.');\n\n        doOrPretend(function () {\n          overwriteDest(src, dest);\n        });\n        return;\n      }\n\n      // we can now compare the files\n      if (isSrcDirectory || haventChangedFn()) {\n        return;\n      }\n\n      logger.writeln('Updating file ' + dest.cyan);\n      doOrPretend(function () {\n        // and just update destination\n        tryCopy(src, dest);\n      });\n    }\n  }\n\n  function removePaths (justPretend, logger, paths) {\n\n    return promise.all(paths.map(function (file) {\n      return fs.stat(file).then(function (stat) {\n        return {\n          file: file,\n          isDirectory: stat.isDirectory()\n        };\n      });\n    })).then(function (stats) {\n      var paths = splitFilesAndDirs(stats);\n\n      // First we need to process files\n      return promise.all(paths.files.map(function (filePath) {\n        logger.writeln('Unlinking ' + filePath.cyan + ' because it was removed from src.');\n\n        if (justPretend) {\n          return;\n        }\n        return fs.unlink(filePath);\n      })).then(function () {\n        // Then process directories in ascending order\n        var sortedDirs = paths.dirs.sort(function (a, b) {\n          return b.length - a.length;\n        });\n\n        return sortedDirs.map(function (dir) {\n          logger.writeln('Removing dir ' + dir.cyan + ' because not longer in src.');\n          if (justPretend) {\n            return;\n          }\n          return fs.rmdirSync(dir);\n        });\n      });\n    });\n  }\n\n  function splitFilesAndDirs (stats) {\n    return stats.reduce(function (memo, stat) {\n      if (stat.isDirectory) {\n        memo.dirs.push(stat.file);\n      } else {\n        memo.files.push(stat.file);\n      }\n      return memo;\n    }, {\n      files: [],\n      dirs: []\n    });\n  }\n\n  function fastArrayDiff (from, diff) {\n    diff.map(function (v) {\n      from[from.indexOf(v)] = undefined;\n    });\n    return from.filter(function (v) {\n      return v;\n    });\n  }\n\n  function convertPathToSystemSpecific (pathToConvert) {\n    var newPath = path.join.apply(path, pathToConvert.split('/'));\n    var startsWithSlash = pathToConvert[0] === '/';\n    if (startsWithSlash) {\n      return '/' + newPath;\n    }\n\n    return newPath;\n  }\n\n  function convertPathsToSystemSpecific (paths) {\n    if (!paths.map) {\n      return convertPathToSystemSpecific (paths);\n    }\n\n    return paths.map(function (filePath) {\n      return convertPathToSystemSpecific (filePath);\n    });\n  }\n\n  function addDirectoriesPaths (arr, dest) {\n    var f = dest.split(path.sep);\n    var i, p;\n    p = f[0];\n\n    for (i = 1; i < f.length - 1; ++i) {\n      p += path.sep + f[i];\n      if (arr.indexOf(p) === -1) {\n        arr.push(p);\n      }\n    }\n  }\n\n  function getComparatorFactory(compareUsing, logger) {\n\n    var md5;\n\n    switch (compareUsing) {\n      case 'md5':\n        md5 = require('md5-file');\n        return createMd5Comparator;\n      case 'mtime':\n        return createMTimeComparator;\n      default:\n        logger.writeln(\"Invalid 'compareUsing' option, falling back to default 'mtime'\");\n        return createMTimeComparator;\n    }\n\n    function createMTimeComparator(src, srcStat, dest, destStat) {\n      return function() {\n        return srcStat.mtime.getTime() <= destStat.mtime.getTime();\n      };\n    }\n\n    function createMd5Comparator(src, srcStat, dest, destStat) {\n      return function() {\n        return md5(src) == md5(dest);\n      };\n    }\n  }\n\n};\n"}